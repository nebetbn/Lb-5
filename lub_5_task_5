#include <iostream>
#include <vector>
#include <algorithm> // Для std::max

int main() {
    // Оптимізація введення/виведення C++ для швидкості
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int n;
    std::cin >> n; // Зчитуємо кількість елементів першої послідовності
    std::vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> a[i]; // Зчитуємо елементи першої послідовності
    }

    int m;
    std::cin >> m; // Зчитуємо кількість елементів другої послідовності
    std::vector<int> b(m);
    for (int i = 0; i < m; ++i) {
        std::cin >> b[i]; // Зчитуємо елементи другої послідовності
    }

    // dp[i][j] буде зберігати довжину найбільшої спільної підпослідовності
    // для a[0...i-1] та b[0...j-1]
    // Використовуємо розмір (n+1)x(m+1), щоб працювати з 1-індексованими послідовностями
    // для зручності рекурентних співвідношень.
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(m + 1, 0));

    // Заповнення таблиці DP
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (a[i-1] == b[j-1]) { // Якщо поточні елементи співпадають
                dp[i][j] = dp[i-1][j-1] + 1;
            } else { // Якщо елементи не співпадають
                dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }

    // Результат - це значення у правому нижньому куті таблиці DP
    std::cout << dp[n][m] << "\n"; // Виводимо кількість елементів у найбільшій спільній підпослідовності

    return 0;
}
