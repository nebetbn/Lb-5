#include <iostream>
#include <vector>
#include <algorithm> // Для std::max

int main() {
    // Оптимізація введення/виведення C++ для швидкості
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int N, k;
    std::cin >> N >> k; // Зчитуємо N та k

    // dp[i] зберігатиме кількість способів дістатися до клітинки i
    // Використовуємо long long для обробки потенційно великих чисел
    std::vector<long long> dp(N + 1, 0);

    // Базовий випадок: Існує один спосіб дістатися до першої клітинки (почавши з неї)
    dp[1] = 1;

    // Заповнюємо таблицю DP від клітинки 2 до N
    for (int i = 2; i <= N; ++i) {
        // Коник може дістатися до клітинки i з будь-якої клітинки j,
        // де i-k <= j <= i-1.
        // Нам потрібно просумувати dp[j] для всіх дійсних j.
        for (int prev_cell = std::max(1, i - k); prev_cell < i; ++prev_cell) {
            dp[i] += dp[prev_cell];
        }
    }

    // Результатом є кількість способів дістатися до N-ї клітинки
    std::cout << dp[N] << "\n";

    return 0;
}
