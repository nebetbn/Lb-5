#include <iostream>
#include <vector>

int main() {
    // Оптимізація введення/виведення C++ для швидкості
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int N;
    std::cin >> N; // Зчитуємо вхідне значення N

    // dp[i][0]: кількість дійсних послідовностей довжини i, що закінчуються на '0'
    // dp[i][1]: кількість дійсних послідовностей довжини i, що закінчуються на '1' (одинична '1')
    // dp[i][2]: кількість дійсних послідовностей довжини i, що закінчуються на '11' (дві '1')
    // Використовуємо long long для запобігання переповненню, оскільки числа можуть швидко зростати
    std::vector<std::vector<long long>> dp(N + 1, std::vector<long long>(3, 0));

    // Базові випадки для N = 1
    dp[1][0] = 1; // "0"
    dp[1][1] = 1; // "1"
    dp[1][2] = 0; // Не може бути "11" для довжини 1

    // Заповнюємо таблицю DP
    for (int i = 2; i <= N; ++i) {
        // Послідовність довжини i, що закінчується на '0', може бути утворена шляхом додавання '0'
        // до будь-якої дійсної послідовності довжини i-1.
        dp[i][0] = dp[i-1][0] + dp[i-1][1] + dp[i-1][2];

        // Послідовність довжини i, що закінчується на одиничну '1', повинна була мати '0' перед нею.
        // Отже, додаємо '1' до послідовностей довжини i-1, що закінчуються на '0'.
        dp[i][1] = dp[i-1][0];

        // Послідовність довжини i, що закінчується на "11", повинна була мати "01" перед нею.
        // Отже, додаємо '1' до послідовностей довжини i-1, що закінчуються на одиничну '1'.
        dp[i][2] = dp[i-1][1];
    }

    // Загальна кількість для довжини N – це сума послідовностей, що закінчуються на '0', '1' або '11'.
    long long total_count = dp[N][0] + dp[N][1] + dp[N][2];

    std::cout << total_count << "\n"; // Виводимо результат

    return 0;
}
